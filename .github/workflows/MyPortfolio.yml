name: MYPortfolio

on:
    push:
        branches: [release, dev]
permissions:
    contents: read
    pages: write
    id-token: write

concurrency:
    group: 'pages'
    cancel-in-progress: true
jobs:
    lintTest:
        name: LintCode
        runs-on: ubuntu-latest
        steps:
            - name: Clone Respository
              uses: actions/checkout@v3
            - name: Install Dependecies
              run: |
                  echo 'Running installing dependecies...'
                  npm install
            - name: Run Linting
              run: |
                  echo 'Running linting tests...'
                  npm run lint
              env:
                  CI: true
    securtyCheck:
        name: Securty Check
        runs-on: ubuntu-latest
        steps:
            - name: Check for vulnerablities
              run: |
                  echo 'Running check for vulnerablities...'
                  sleep 5s;
                  echo 'Running check for vulnerablities... 1'
                  sleep 5s;
                  echo 'Running check for vulnerablities... 2'
                  sleep 5s;
                  echo 'Running check for vulnerablities... 3'
                  sleep 5s;
    build:
        runs-on: ubuntu-latest
        needs: [lintTest, securtyCheck]
        steps:
            - name: Checkout 🛎️
              uses: actions/checkout@v3
            - name: Detect package manager 👻
              id: detect-package-manager
              run: |
                  if [ -f "${{ github.workspace }}/yarn.lock" ]; then
                    echo "::set-output name=manager::yarn"
                    echo "::set-output name=command::install"
                    echo "::set-output name=runner::yarn"
                    exit 0
                  elif [ -f "${{ github.workspace }}/package.json" ]; then
                    echo "::set-output name=manager::npm"
                    echo "::set-output name=command::ci"
                    echo "::set-output name=runner::npx --no-install"
                    exit 0
                  else
                    echo "Unable to determine packager manager"
                    exit 1
                  fi
            - name: Setup Node 🍉
              uses: actions/setup-node@v3
              with:
                  cache: ${{ steps.detect-package-manager.outputs.manager }}
                  node-version: '16.10.0'

            - name: Setup Pages 🔧
              id: pages
              uses: actions/configure-pages@v1
              with:
                  # Automatically inject basePath in your Next.js configuration file and disable
                  # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
                  #
                  # You may remove this line if you want to manage the configuration yourself.
                  static_site_generator: next
            - name: Restore cache 💾
              uses: actions/cache@v3
              with:
                  path: |
                      .next/cache
                  # Generate a new cache whenever packages or source files change.
                  key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
                  # If source files changed but packages didn't, rebuild from a prior cache.
                  restore-keys: |
                      ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
            - name: Install dependencies 🥑
              run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
            - name: Build with Next.js 🍄
              run: ${{ steps.detect-package-manager.outputs.runner }} next build
            - name: Static HTML export with Next.js 🥯
              run: ${{ steps.detect-package-manager.outputs.runner }} next export
            - name: Upload artifact ⛱️
              uses: actions/upload-pages-artifact@v1
              with:
                  path: ./out

    # Deployment job
    deploy:
        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Deploy to GitHub Pages 🚀
              id: deployment
              uses: actions/deploy-pages@v1
